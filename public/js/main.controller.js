'use strict';

angular.module('swiss').controller('mainController', function ($scope, $http, GEOCODE, $timeout, Auth, $firebaseAuth, LocalStorage, $rootScope, $state) {
	var vm = this;

	vm.display = true;
	vm.auth = Auth;

	vm.auth.$onAuth(function (authData) {
		if (authData) {
			vm.profile = authData;
			console.log('logged in as' + authData);
		} else {
			console.log('logged out');
			$state.go('start');
		}
	});

	vm.queryChanged = _.debounce(function () {
		$http.get(GEOCODE, {
			params: { address: vm.query }
		}).success(function (data) {
			vm.cities = data.results;
			vm.display = false;
		});
	}, 2000);

	vm.check = {
		weather: false,
		news: false,
		toDo: false
	};

	$rootScope.$on('$stateChangeSuccess', function (event, toState) {
		vm.cities = null;
	});
}).controller('weatherController', function ($scope, $timeout, Weather, WeatherData, currentAuth) {
	var vm = this;

	_.debounce(function () {
		Weather.getWeather();
		Weather.date();
		vm.date = WeatherData.formatdate.toString();
		vm.data = WeatherData;
	}, 2000)();
}).controller('newsController', function (Hacker, paperBoy, $scope, $timeout, currentAuth, $sce, FB, $firebaseObject) {
	var vm = this;
	Hacker.topNews();
	Hacker.askStories();
	Hacker.showStories();
	vm.hackerNews = paperBoy.hackerNews;

	vm.getFavorites = function () {
		FB.getFavorites(function (result) {
			vm.favorites = result.val();
		});
	};

	vm.favorite = function (news) {
		console.log(news);
		FB.newFavorite(news);
	};

	vm.unfavorite = function (id) {
		FB.unfavorite(id, function (result) {
			vm.favorites = result.val();
		});
	};
}).controller('todoController', function ($scope, $timeout, currentAuth) {
	var vm = this;
});
//# sourceMappingURL=data:application/json;base64,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QUFDLFlBQVksQ0FBQyxVQUFTLE1BQU0sRUFBRTtBQUNoQyxLQUFFLENBQUMsU0FBUyxHQUFHLE1BQU0sQ0FBQyxHQUFHLEVBQUUsQ0FBQztHQUM1QixDQUFDLENBQUM7RUFDSCxDQUFBOztBQUVELEdBQUUsQ0FBQyxRQUFRLEdBQUcsVUFBVSxJQUFJLEVBQUU7QUFDN0IsU0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNqQixJQUFFLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDO0VBQ3JCLENBQUE7O0FBRUQsR0FBRSxDQUFDLFVBQVUsR0FBRyxVQUFVLEVBQUUsRUFBRTtBQUM3QixJQUFFLENBQUMsVUFBVSxDQUFDLEVBQUUsRUFBRSxVQUFVLE1BQU0sRUFBRTtBQUNuQyxLQUFFLENBQUMsU0FBUyxHQUFHLE1BQU0sQ0FBQyxHQUFHLEVBQUUsQ0FBQztHQUM1QixDQUFDLENBQUM7RUFDSCxDQUFBO0NBR0QsQ0FBQyxDQUVELFVBQVUsQ0FBQyxnQkFBZ0IsRUFBRSxVQUFTLE1BQU0sRUFBRSxRQUFRLEVBQUUsV0FBVyxFQUFFO0FBQ3JFLEtBQUksRUFBRSxHQUFHLElBQUksQ0FBQztDQUVkLENBQUMsQ0FBQSIsImZpbGUiOiJzcmMvanMvbWFpbi5jb250cm9sbGVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiYW5ndWxhci5tb2R1bGUoJ3N3aXNzJylcblxuLmNvbnRyb2xsZXIoJ21haW5Db250cm9sbGVyJywgZnVuY3Rpb24oJHNjb3BlLCAkaHR0cCwgR0VPQ09ERSwgJHRpbWVvdXQsIEF1dGgsICRmaXJlYmFzZUF1dGgsIExvY2FsU3RvcmFnZSwgJHJvb3RTY29wZSwgJHN0YXRlKSB7XG5cdHZhciB2bSA9IHRoaXM7XG5cblx0dm0uZGlzcGxheSA9IHRydWU7XG5cdHZtLmF1dGggPSBBdXRoO1xuXG5cblx0dm0uYXV0aC4kb25BdXRoKGZ1bmN0aW9uIChhdXRoRGF0YSkge1xuXHRcdGlmIChhdXRoRGF0YSkge1xuXHRcdFx0dm0ucHJvZmlsZSA9IGF1dGhEYXRhO1xuXHRcdFx0Y29uc29sZS5sb2coJ2xvZ2dlZCBpbiBhcycgKyBhdXRoRGF0YSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGNvbnNvbGUubG9nKCdsb2dnZWQgb3V0Jyk7XG5cdFx0XHQkc3RhdGUuZ28oJ3N0YXJ0Jyk7XG5cdFx0fVxuXHR9KVxuXG5cdHZtLnF1ZXJ5Q2hhbmdlZCA9IF8uZGVib3VuY2UoZnVuY3Rpb24gKCkge1xuXHRcdCRodHRwXG5cdFx0LmdldChHRU9DT0RFLCB7XG5cdFx0XHRwYXJhbXM6IHthZGRyZXNzOiB2bS5xdWVyeX1cblx0XHR9KVxuXHRcdC5zdWNjZXNzKGZ1bmN0aW9uKGRhdGEpe1xuXHRcdFx0dm0uY2l0aWVzID0gZGF0YS5yZXN1bHRzXG5cdFx0XHR2bS5kaXNwbGF5ID0gZmFsc2U7XG5cdFx0fSk7XG5cblx0fSwgMjAwMCk7XG5cblx0dm0uY2hlY2sgPSB7XG5cdFx0d2VhdGhlcjogZmFsc2UsXG5cdFx0bmV3czogZmFsc2UsXG5cdFx0dG9EbzogZmFsc2Vcblx0fTtcblxuXHQkcm9vdFNjb3BlLiRvbignJHN0YXRlQ2hhbmdlU3VjY2VzcycsIGZ1bmN0aW9uIChldmVudCwgdG9TdGF0ZSkge1xuXHRcdHZtLmNpdGllcyA9IG51bGw7XG5cdH0pO1xuXG59KVxuXG4uY29udHJvbGxlcignd2VhdGhlckNvbnRyb2xsZXInLCBmdW5jdGlvbigkc2NvcGUsICR0aW1lb3V0LCBXZWF0aGVyLCBXZWF0aGVyRGF0YSwgY3VycmVudEF1dGgpIHtcblx0dmFyIHZtID0gdGhpcztcblxuXHRfLmRlYm91bmNlKGZ1bmN0aW9uKCkge1xuXHRcdFdlYXRoZXIuZ2V0V2VhdGhlcigpXG5cdFx0V2VhdGhlci5kYXRlKClcblx0XHR2bS5kYXRlID0gV2VhdGhlckRhdGEuZm9ybWF0ZGF0ZS50b1N0cmluZygpXG5cdFx0dm0uZGF0YSA9IFdlYXRoZXJEYXRhXG5cdH0sMjAwMCkoKTtcblxuXG59KVxuXG4uY29udHJvbGxlcignbmV3c0NvbnRyb2xsZXInLCBmdW5jdGlvbihIYWNrZXIsIHBhcGVyQm95LCAkc2NvcGUsICR0aW1lb3V0LCBjdXJyZW50QXV0aCwgJHNjZSwgRkIsICRmaXJlYmFzZU9iamVjdCkge1xuXHR2YXIgdm0gPSB0aGlzO1xuXHRIYWNrZXIudG9wTmV3cygpO1xuXHRIYWNrZXIuYXNrU3RvcmllcygpO1xuXHRIYWNrZXIuc2hvd1N0b3JpZXMoKTtcblx0dm0uaGFja2VyTmV3cyA9IHBhcGVyQm95LmhhY2tlck5ld3M7XG5cblx0dm0uZ2V0RmF2b3JpdGVzID0gZnVuY3Rpb24gKCkge1xuXHRcdEZCLmdldEZhdm9yaXRlcyhmdW5jdGlvbihyZXN1bHQpIHtcblx0XHRcdHZtLmZhdm9yaXRlcyA9IHJlc3VsdC52YWwoKTtcblx0XHR9KTtcblx0fVxuXG5cdHZtLmZhdm9yaXRlID0gZnVuY3Rpb24gKG5ld3MpIHtcblx0XHRjb25zb2xlLmxvZyhuZXdzKVxuXHRcdEZCLm5ld0Zhdm9yaXRlKG5ld3MpO1xuXHR9XG5cblx0dm0udW5mYXZvcml0ZSA9IGZ1bmN0aW9uIChpZCkge1xuXHRcdEZCLnVuZmF2b3JpdGUoaWQsIGZ1bmN0aW9uIChyZXN1bHQpIHtcblx0XHRcdHZtLmZhdm9yaXRlcyA9IHJlc3VsdC52YWwoKTtcblx0XHR9KTtcblx0fVxuXG5cbn0pXG5cbi5jb250cm9sbGVyKCd0b2RvQ29udHJvbGxlcicsIGZ1bmN0aW9uKCRzY29wZSwgJHRpbWVvdXQsIGN1cnJlbnRBdXRoKSB7XG5cdHZhciB2bSA9IHRoaXM7XG5cbn0pXG5cbiJdfQ==
