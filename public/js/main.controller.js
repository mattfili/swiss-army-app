'use strict';

angular.module('swiss').controller('mainController', function ($scope, $http, GEOCODE, $timeout, Auth, $firebaseAuth, LocalStorage, $rootScope, $state) {
	var vm = this;

	vm.display = true;
	vm.auth = Auth;

	vm.auth.$onAuth(function (authData) {
		if (authData) {
			vm.profile = authData;
			console.log('logged in as' + authData);
		} else {
			console.log('logged out');
			$state.go('start');
		}
	});

	vm.queryChanged = _.debounce(function () {
		$http.get(GEOCODE, {
			params: { address: vm.query }
		}).success(function (data) {
			vm.cities = data.results;
			vm.display = false;
		});
	}, 2000);

	vm.check = {
		weather: false,
		news: false,
		toDo: false
	};

	$rootScope.$on('$stateChangeSuccess', function (event, toState) {
		vm.cities = null;
	});
}).controller('weatherController', function ($scope, $timeout, Weather, WeatherData, currentAuth) {
	var vm = this;

	_.debounce(function () {
		Weather.getWeather();
		Weather.date();
		vm.date = WeatherData.formatdate.toString();
		vm.data = WeatherData;
	}, 2000)();
}).controller('newsController', function (Hacker, paperBoy, $scope, $timeout, currentAuth, $sce, FB, $firebaseObject) {
	var vm = this;
	Hacker.topNews();
	Hacker.askStories();
	Hacker.showStories();
	vm.hackerNews = paperBoy.hackerNews;

	vm.getFavorites = function () {
		FB.getFavorites(function (result) {
			vm.favorites = result.val();
		});
	};

	vm.favorite = function (news) {
		console.log(news);
		FB.newFavorite(news);
	};

	vm.unfavorite = function (id) {
		FB.unfavorite(id, function (result) {
			vm.favorites = result.val();
		});
	};

	var dateItUp = function dateItUp() {
		var dateString = new Date();
		return dateString.toDateString();
	};

	vm.newDate = function () {
		dateItUp();
	};
}).controller('todoController', function ($scope, $timeout, currentAuth) {
	var vm = this;
});
//# sourceMappingURL=data:application/json;base64,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QUFDLFlBQVksQ0FBQyxVQUFTLE1BQU0sRUFBRTtBQUNoQyxLQUFFLENBQUMsU0FBUyxHQUFHLE1BQU0sQ0FBQyxHQUFHLEVBQUUsQ0FBQztHQUM1QixDQUFDLENBQUM7RUFDSCxDQUFBOztBQUVELEdBQUUsQ0FBQyxRQUFRLEdBQUcsVUFBVSxJQUFJLEVBQUU7QUFDN0IsU0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUNsQixJQUFFLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDO0VBQ3JCLENBQUM7O0FBRUYsR0FBRSxDQUFDLFVBQVUsR0FBRyxVQUFVLEVBQUUsRUFBRTtBQUM3QixJQUFFLENBQUMsVUFBVSxDQUFDLEVBQUUsRUFBRSxVQUFVLE1BQU0sRUFBRTtBQUNuQyxLQUFFLENBQUMsU0FBUyxHQUFHLE1BQU0sQ0FBQyxHQUFHLEVBQUUsQ0FBQztHQUM1QixDQUFDLENBQUM7RUFDSCxDQUFDOztBQUVGLEtBQUksUUFBUSxHQUFHLFNBQVgsUUFBUSxHQUFlO0FBQzFCLE1BQUksVUFBVSxHQUFHLElBQUksSUFBSSxFQUFFLENBQUM7QUFDNUIsU0FBTyxVQUFVLENBQUMsWUFBWSxFQUFFLENBQUM7RUFDakMsQ0FBQzs7QUFFRixHQUFFLENBQUMsT0FBTyxHQUFHLFlBQVk7QUFDeEIsVUFBUSxFQUFFLENBQUM7RUFDWCxDQUFDO0NBR0YsQ0FBQyxDQUVELFVBQVUsQ0FBQyxnQkFBZ0IsRUFBRSxVQUFTLE1BQU0sRUFBRSxRQUFRLEVBQUUsV0FBVyxFQUFFO0FBQ3JFLEtBQUksRUFBRSxHQUFHLElBQUksQ0FBQztDQUVkLENBQUMsQ0FBQSIsImZpbGUiOiJzcmMvanMvbWFpbi5jb250cm9sbGVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiYW5ndWxhci5tb2R1bGUoJ3N3aXNzJylcblxuLmNvbnRyb2xsZXIoJ21haW5Db250cm9sbGVyJywgZnVuY3Rpb24oJHNjb3BlLCAkaHR0cCwgR0VPQ09ERSwgJHRpbWVvdXQsIEF1dGgsICRmaXJlYmFzZUF1dGgsIExvY2FsU3RvcmFnZSwgJHJvb3RTY29wZSwgJHN0YXRlKSB7XG5cdHZhciB2bSA9IHRoaXM7XG5cblx0dm0uZGlzcGxheSA9IHRydWU7XG5cdHZtLmF1dGggPSBBdXRoO1xuXG5cblx0dm0uYXV0aC4kb25BdXRoKGZ1bmN0aW9uIChhdXRoRGF0YSkge1xuXHRcdGlmIChhdXRoRGF0YSkge1xuXHRcdFx0dm0ucHJvZmlsZSA9IGF1dGhEYXRhO1xuXHRcdFx0Y29uc29sZS5sb2coJ2xvZ2dlZCBpbiBhcycgKyBhdXRoRGF0YSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGNvbnNvbGUubG9nKCdsb2dnZWQgb3V0Jyk7XG5cdFx0XHQkc3RhdGUuZ28oJ3N0YXJ0Jyk7XG5cdFx0fVxuXHR9KTtcblxuXHR2bS5xdWVyeUNoYW5nZWQgPSBfLmRlYm91bmNlKGZ1bmN0aW9uICgpIHtcblx0XHQkaHR0cFxuXHRcdC5nZXQoR0VPQ09ERSwge1xuXHRcdFx0cGFyYW1zOiB7YWRkcmVzczogdm0ucXVlcnl9XG5cdFx0fSlcblx0XHQuc3VjY2VzcyhmdW5jdGlvbihkYXRhKXtcblx0XHRcdHZtLmNpdGllcyA9IGRhdGEucmVzdWx0c1xuXHRcdFx0dm0uZGlzcGxheSA9IGZhbHNlO1xuXHRcdH0pO1xuXG5cdH0sIDIwMDApO1xuXG5cdHZtLmNoZWNrID0ge1xuXHRcdHdlYXRoZXI6IGZhbHNlLFxuXHRcdG5ld3M6IGZhbHNlLFxuXHRcdHRvRG86IGZhbHNlXG5cdH07XG5cblx0JHJvb3RTY29wZS4kb24oJyRzdGF0ZUNoYW5nZVN1Y2Nlc3MnLCBmdW5jdGlvbiAoZXZlbnQsIHRvU3RhdGUpIHtcblx0XHR2bS5jaXRpZXMgPSBudWxsO1xuXHR9KTtcblxufSlcblxuLmNvbnRyb2xsZXIoJ3dlYXRoZXJDb250cm9sbGVyJywgZnVuY3Rpb24oJHNjb3BlLCAkdGltZW91dCwgV2VhdGhlciwgV2VhdGhlckRhdGEsIGN1cnJlbnRBdXRoKSB7XG5cdHZhciB2bSA9IHRoaXM7XG5cblx0Xy5kZWJvdW5jZShmdW5jdGlvbigpIHtcblx0XHRXZWF0aGVyLmdldFdlYXRoZXIoKVxuXHRcdFdlYXRoZXIuZGF0ZSgpXG5cdFx0dm0uZGF0ZSA9IFdlYXRoZXJEYXRhLmZvcm1hdGRhdGUudG9TdHJpbmcoKVxuXHRcdHZtLmRhdGEgPSBXZWF0aGVyRGF0YVxuXHR9LDIwMDApKCk7XG5cblxufSlcblxuLmNvbnRyb2xsZXIoJ25ld3NDb250cm9sbGVyJywgZnVuY3Rpb24oSGFja2VyLCBwYXBlckJveSwgJHNjb3BlLCAkdGltZW91dCwgY3VycmVudEF1dGgsICRzY2UsIEZCLCAkZmlyZWJhc2VPYmplY3QpIHtcblx0dmFyIHZtID0gdGhpcztcblx0SGFja2VyLnRvcE5ld3MoKTtcblx0SGFja2VyLmFza1N0b3JpZXMoKTtcblx0SGFja2VyLnNob3dTdG9yaWVzKCk7XG5cdHZtLmhhY2tlck5ld3MgPSBwYXBlckJveS5oYWNrZXJOZXdzO1xuXG5cdHZtLmdldEZhdm9yaXRlcyA9IGZ1bmN0aW9uICgpIHtcblx0XHRGQi5nZXRGYXZvcml0ZXMoZnVuY3Rpb24ocmVzdWx0KSB7XG5cdFx0XHR2bS5mYXZvcml0ZXMgPSByZXN1bHQudmFsKCk7XG5cdFx0fSk7XG5cdH1cblxuXHR2bS5mYXZvcml0ZSA9IGZ1bmN0aW9uIChuZXdzKSB7XG5cdFx0Y29uc29sZS5sb2cobmV3cyk7XG5cdFx0RkIubmV3RmF2b3JpdGUobmV3cyk7XG5cdH07XG5cblx0dm0udW5mYXZvcml0ZSA9IGZ1bmN0aW9uIChpZCkge1xuXHRcdEZCLnVuZmF2b3JpdGUoaWQsIGZ1bmN0aW9uIChyZXN1bHQpIHtcblx0XHRcdHZtLmZhdm9yaXRlcyA9IHJlc3VsdC52YWwoKTtcblx0XHR9KTtcblx0fTtcblxuXHR2YXIgZGF0ZUl0VXAgPSBmdW5jdGlvbiAoKSB7XG5cdFx0dmFyIGRhdGVTdHJpbmcgPSBuZXcgRGF0ZSgpO1xuXHRcdHJldHVybiBkYXRlU3RyaW5nLnRvRGF0ZVN0cmluZygpO1xuXHR9O1xuXG5cdHZtLm5ld0RhdGUgPSBmdW5jdGlvbiAoKSB7XG5cdFx0ZGF0ZUl0VXAoKTtcblx0fTtcblxuXG59KVxuXG4uY29udHJvbGxlcigndG9kb0NvbnRyb2xsZXInLCBmdW5jdGlvbigkc2NvcGUsICR0aW1lb3V0LCBjdXJyZW50QXV0aCkge1xuXHR2YXIgdm0gPSB0aGlzO1xuXG59KVxuXG4iXX0=
