'use strict';

angular.module('swiss', ['ui.router', 'foundation', 'foundation.common', 'ngAnimate', 'mm.foundation', 'firebase', 'wu.masonry']).constant('GEOCODE', 'https://maps.googleapis.com/maps/api/geocode/json').constant('FIRE_URL', 'https://swa.firebaseio.com/').config(function ($stateProvider, $urlRouterProvider, $locationProvider) {
	$urlRouterProvider.when('', '/landing');
	$urlRouterProvider.otherwise('/landing');

	$locationProvider.html5Mode({
		enabled: false,
		requireBase: false
	});

	$stateProvider.state('start', {
		url: '/landing',
		templateUrl: 'assets/landing.html',
		controller: 'mainController',
		controllerAs: 'Ctrl'
	}).state('start.engage', {
		url: '/:city/:lat/:long',
		views: {
			'weather': {
				templateUrl: 'assets/weather.html',
				controller: 'weatherController',
				controllerAs: 'wCtrl'
			},
			'news': {
				templateUrl: 'assets/news.html',
				controller: 'newsController',
				controllerAs: 'nCtrl'
			},
			'toDo': {
				templateUrl: 'assets/news.html',
				controller: 'todoController',
				controllerAs: 'tdCtrl'
			}
		},
		resolve: {
			'currentAuth': function currentAuth(Auth) {
				return Auth.$waitForAuth();
			}
		}
	});
}).run(function ($rootScope, $state) {
	$rootScope.$on("$routeChangeError", function (event, next, previous, error) {
		if (error === "AUTH_REQUIRED") {
			$state.go('/landing');
		}
	});
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9qcy9tYWluLmNvbmZpZy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLE9BQU8sQ0FBQyxNQUFNLENBQUMsT0FBTyxFQUFFLENBQUMsV0FBVyxFQUFDLFlBQVksRUFBRSxtQkFBbUIsRUFBRSxXQUFXLEVBQUUsZUFBZSxFQUFFLFVBQVUsRUFBRSxZQUFZLENBQUMsQ0FBQyxDQUUvSCxRQUFRLENBQUMsU0FBUyxFQUFFLG1EQUFtRCxDQUFDLENBRXhFLFFBQVEsQ0FBQyxVQUFVLEVBQUUsNkJBQTZCLENBQUMsQ0FFbkQsTUFBTSxDQUFDLFVBQVUsY0FBYyxFQUFFLGtCQUFrQixFQUFFLGlCQUFpQixFQUFFO0FBQ3hFLG1CQUFrQixDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsVUFBVSxDQUFDLENBQUM7QUFDeEMsbUJBQWtCLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBQyxDQUFDOztBQUV6QyxrQkFBaUIsQ0FBQyxTQUFTLENBQUM7QUFDM0IsU0FBTyxFQUFFLEtBQUs7QUFDZCxhQUFXLEVBQUUsS0FBSztFQUNsQixDQUFDLENBQUM7O0FBRUgsZUFBYyxDQUNiLEtBQUssQ0FBQyxPQUFPLEVBQUU7QUFDZixLQUFHLEVBQUUsVUFBVTtBQUNaLGFBQVcsRUFBRSxxQkFBcUI7QUFDbEMsWUFBVSxFQUFFLGdCQUFnQjtBQUM1QixjQUFZLEVBQUUsTUFBTTtFQUNyQixDQUFDLENBRUgsS0FBSyxDQUFDLGNBQWMsRUFBRTtBQUN0QixLQUFHLEVBQUUsbUJBQW1CO0FBQ3JCLE9BQUssRUFBRTtBQUNMLFlBQVMsRUFBRTtBQUNULGVBQVcsRUFBRSxxQkFBcUI7QUFDbEMsY0FBVSxFQUFFLG1CQUFtQjtBQUMvQixnQkFBWSxFQUFFLE9BQU87SUFDdEI7QUFDRCxTQUFNLEVBQUU7QUFDTixlQUFXLEVBQUUsa0JBQWtCO0FBQy9CLGNBQVUsRUFBRSxnQkFBZ0I7QUFDNUIsZ0JBQVksRUFBRSxPQUFPO0lBQ3RCO0FBQ0QsU0FBTSxFQUFFO0FBQ04sZUFBVyxFQUFFLGtCQUFrQjtBQUMvQixjQUFVLEVBQUUsZ0JBQWdCO0FBQzVCLGdCQUFZLEVBQUUsUUFBUTtJQUN2QjtHQUNGO0FBQ0QsU0FBTyxFQUFFO0FBQ1IsZ0JBQWEsRUFBRSxxQkFBVSxJQUFJLEVBQUU7QUFDOUIsV0FBTyxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDM0I7R0FDRDtFQUNKLENBQUMsQ0FBQTtDQUNGLENBQUMsQ0FHRCxHQUFHLENBQUMsVUFBUyxVQUFVLEVBQUUsTUFBTSxFQUFFO0FBQ2pDLFdBQVUsQ0FBQyxHQUFHLENBQUMsbUJBQW1CLEVBQUUsVUFBUyxLQUFLLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQUU7QUFDeEUsTUFBSSxLQUFLLEtBQUssZUFBZSxFQUFFO0FBQzdCLFNBQU0sQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLENBQUM7R0FDdkI7RUFDSCxDQUFDLENBQUM7Q0FDSCxDQUFDLENBQUEiLCJmaWxlIjoic3JjL2pzL21haW4uY29uZmlnLmpzIiwic291cmNlc0NvbnRlbnQiOlsiYW5ndWxhci5tb2R1bGUoJ3N3aXNzJywgWyd1aS5yb3V0ZXInLCdmb3VuZGF0aW9uJywgJ2ZvdW5kYXRpb24uY29tbW9uJywgJ25nQW5pbWF0ZScsICdtbS5mb3VuZGF0aW9uJywgJ2ZpcmViYXNlJywgJ3d1Lm1hc29ucnknXSlcblxuLmNvbnN0YW50KCdHRU9DT0RFJywgJ2h0dHBzOi8vbWFwcy5nb29nbGVhcGlzLmNvbS9tYXBzL2FwaS9nZW9jb2RlL2pzb24nKVxuXG4uY29uc3RhbnQoJ0ZJUkVfVVJMJywgJ2h0dHBzOi8vc3dhLmZpcmViYXNlaW8uY29tLycpXG5cbi5jb25maWcoZnVuY3Rpb24gKCRzdGF0ZVByb3ZpZGVyLCAkdXJsUm91dGVyUHJvdmlkZXIsICRsb2NhdGlvblByb3ZpZGVyKSB7XG5cdCR1cmxSb3V0ZXJQcm92aWRlci53aGVuKCcnLCAnL2xhbmRpbmcnKTtcblx0JHVybFJvdXRlclByb3ZpZGVyLm90aGVyd2lzZSgnL2xhbmRpbmcnKTtcblxuXHQkbG9jYXRpb25Qcm92aWRlci5odG1sNU1vZGUoe1xuXHRcdGVuYWJsZWQ6IGZhbHNlLFxuXHRcdHJlcXVpcmVCYXNlOiBmYWxzZVxuXHR9KTtcblxuXHQkc3RhdGVQcm92aWRlclxuXHQuc3RhdGUoJ3N0YXJ0Jywge1xuXHRcdHVybDogJy9sYW5kaW5nJyxcblx0ICAgIHRlbXBsYXRlVXJsOiAnYXNzZXRzL2xhbmRpbmcuaHRtbCcsXG5cdCAgIFx0Y29udHJvbGxlcjogJ21haW5Db250cm9sbGVyJyxcblx0ICAgIGNvbnRyb2xsZXJBczogJ0N0cmwnXG4gIFx0fSlcblxuXHQuc3RhdGUoJ3N0YXJ0LmVuZ2FnZScsIHtcblx0XHR1cmw6ICcvOmNpdHkvOmxhdC86bG9uZycsXG5cdCAgICB2aWV3czoge1xuXHQgICAgICAnd2VhdGhlcic6IHtcblx0ICAgICAgICB0ZW1wbGF0ZVVybDogJ2Fzc2V0cy93ZWF0aGVyLmh0bWwnLFxuXHQgICAgICAgIGNvbnRyb2xsZXI6ICd3ZWF0aGVyQ29udHJvbGxlcicsXG5cdCAgICAgICAgY29udHJvbGxlckFzOiAnd0N0cmwnXG5cdCAgICAgIH0sXG5cdCAgICAgICduZXdzJzoge1xuXHQgICAgICAgIHRlbXBsYXRlVXJsOiAnYXNzZXRzL25ld3MuaHRtbCcsXG5cdCAgICAgICAgY29udHJvbGxlcjogJ25ld3NDb250cm9sbGVyJyxcblx0ICAgICAgICBjb250cm9sbGVyQXM6ICduQ3RybCdcblx0ICAgICAgfSxcblx0ICAgICAgJ3RvRG8nOiB7XG5cdCAgICAgICAgdGVtcGxhdGVVcmw6ICdhc3NldHMvbmV3cy5odG1sJyxcblx0ICAgICAgICBjb250cm9sbGVyOiAndG9kb0NvbnRyb2xsZXInLFxuXHQgICAgICAgIGNvbnRyb2xsZXJBczogJ3RkQ3RybCdcblx0ICAgICAgfVxuXHQgICAgfSxcblx0ICAgIHJlc29sdmU6IHtcblx0ICAgIFx0J2N1cnJlbnRBdXRoJzogZnVuY3Rpb24gKEF1dGgpIHtcblx0ICAgIFx0XHRyZXR1cm4gQXV0aC4kd2FpdEZvckF1dGgoKTtcblx0ICAgIFx0fVxuXHQgICAgfVxuXHR9KVxufSlcblxuXG4ucnVuKGZ1bmN0aW9uKCRyb290U2NvcGUsICRzdGF0ZSkge1xuXHQkcm9vdFNjb3BlLiRvbihcIiRyb3V0ZUNoYW5nZUVycm9yXCIsIGZ1bmN0aW9uKGV2ZW50LCBuZXh0LCBwcmV2aW91cywgZXJyb3IpIHtcbiAgXHRcdGlmIChlcnJvciA9PT0gXCJBVVRIX1JFUVVJUkVEXCIpIHtcbiAgICBcdFx0JHN0YXRlLmdvKCcvbGFuZGluZycpO1xuICBcdFx0fVxuXHR9KTtcbn0pXG5cbiJdfQ==
